#include <bits/stdc++.h>
using namespace std;
#define MAX 5005
#define IN freopen("input.txt", "r", stdin)
#define OUT freopen("output.txt", "w", stdout)

vector<int>adj[MAX];
int c[MAX], d[MAX];
int dist[MAX][MAX];
int minCost[MAX], used[MAX];
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	IN;
	OUT;
	
	int n, k;
	cin >> n >> k;
	for(int i = 1; i <= n; i++){
		cin >> c[i] >> d[i];
	}
	
	for(int i = 1; i <= k; i++){
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	for(int root = 1; root <= n; root++){
		queue<int> q;
		for(int i = 1; i <= n; i++){
			dist[root][i] = n + 1;
		}
		dist[root][root] = 0;
		while(!q.empty()){
			int u = q.front();
			q.pop();
			for(int v = 0; v < adj[u].size(); v++){
				if(dist[root][adj[u][v]] == n + 1){
					dist[root][adj[u][v]] = dist[root][u] + 1;
					q.push(adj[u][v]);
				}
			}
		}
	}
	

	for(int i = 1; i <= n; i++){
		minCost[i] = 10000000;
	}
	minCost[1] = 0;
	
	for(int i = 1; i <= n; i++){
		int minId = -1;
		for(int j = 1; j <= n; j++){
			if(!used[j] && (minId == -1 || minCost[minId] > minCost[j])){
				minId = j;
			}
		}
		
		used[minId] = 1;
	    if(minId == n){
		    cout << minCost[minId] << endl;
		    return 0;
	    }
	    
	    for(int j = 1; j <= n; j++){
	    	if(dist[minId][j] <= d[minId]){
	    		minCost[j] = min(minCost[j], minCost[minId] + c[minId]);
			}
		}
	}
	return 0;
	
}